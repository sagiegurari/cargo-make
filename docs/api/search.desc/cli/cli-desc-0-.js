searchState.loadedDescShard("cli", 0, "cargo-make\ncli\ncli_commands\ncli_parser\nconfig\nlog\nHandles the command line arguments and executes the runner.\nrunner\ntypes\nHandles the command line arguments and executes the runner.\nlist_steps\nprint_steps\nOnly prints the execution plan\nReturns the configuration\nAuto-generated discriminant enum variants\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe logger options used to initialize the logger\nTrue to printout colorful output\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe logger level name (verbose, info, error, off)\nName to prefix each log message\nRuns the requested tasks. The flow is as follows:\nAll conditions must pass\nThe value as boolean\nTrue/False to enable/disable watch\nTrue/False flag (true is deprecated)\nA toolchain with a minimum version bound\nHolds persisted data used by cargo-make\nInstall cargo plugin info\nHolds CLI args\nCommand info\nCondition script value (not as advanced as normal script …\nControl how condition checks are evaluated\nConditional env value\nHolds the entire configuration such as task definitions …\nHolds the configuration found in the makefile toml config …\nHolds crate dependency info.\nHolds crate dependency info.\nHolds crate information loaded from the Cargo.toml file.\nInstall crate params\nGracefully shutdown and then kill the running command on …\nEnv decoding info\nA full dependency definition (potentially in a different …\nA dependency, defined either as a string or as a …\nHolds deprecation info such as true/false/message\nRun Task Info\nEnables to prevent installation flow\nHolds the env file path and attributes\nEnv file path and attributes\nHolds env information\nHolds the env value or script\nEnv value set if condition is met\nEnv value provided by decoding other values\nEnv value holding a list of paths based on given glob …\nEnv value provided by a script\nEnables to unset env variables\nExecution plan which defines all steps to run and the …\nHolds makefile extend value\nExtend with more fine tuning options\nHolds the entire externally read configuration such as …\nScript file name\nScript file name\nFiles modified (input/output) condition structure\nHolds flow information\nHolds mutable flow state\nHolds configuration info for cargo-make\nAny condition group must pass, but each group will be …\nHold dependency info\nExtended info object for env file\nHolds instructions how to install the cargo plugin\nInstall crate name or params\nHolds instructions how to install the crate\nHolds instructions how to install a rustup component\nThe value as a list of strings\nMultiple extends list\nCould be an array or single value\nDeprecation message\nHolds properties to modify the core tasks\nMultiple task names\nMultiple values\nTask name\nA string dependency definition (its name in the current …\nThe value as number\nExtended configuration for watch\nExtend options for more fine tune control\nAny condition must pass\nHolds crate package information loaded from the Cargo.toml …\nThe file path as string\nPath to another makefile\nPath glob\nHolds a single task configuration for a specific platform …\nProfile env\nTask conditional selector\nHolds the run task information\nRun task info\nHolds the run task name/s\nHolds the run task routing information\nRust version condition structure\nInstall rustup component params\nScript which will return the value\nScript content split to parts to enable a more fine tuned …\nScript value (text, file name, …)\nScript content split to multiple parts to enable fine …\nA string specifying the channel name of the toolchain\nSingle task name\nSingle value\nThe script text as single line\nThe script text as single line\nExecution plan step to execute\nHolds a single task configuration such as command and …\nHolds condition attributes\nAn identifier for a task\nHolds watch options or simple true/false value\nArguments used to check whether a crate or rustup …\nThe script text lines\nThe script text lines\nA toolchain with a minimum version bound\nA toolchain, defined either as a string (following the …\nUnset env\nUnstable cargo-make feature\nThe value as string\nThe value as string\nHolds the dependency version\nHolds watch options\nHolds crate workspace info, see …\nTrue for absolute path (default false)\nAdditional profile names to load\nif defined, task points to another task and all other …\nAllow invocation of private tasks\nAllow invocation of private tasks\nApply modifications\nApply modifications\nApply modifications\nThe command args\nThe command args\nThe command args\nadditional command line arguments\nThe path base directory (relative paths are from this base …\nThe binary file name to be used to test if the crate is …\nThe binary file name to be used to test if the crate is …\nThe external Makefile.toml path\nCategory name used to document the task\nReturn the channel of the toolchain to look for\nThe channel of the toolchain to use\nChannel names (stable, beta, nightly)\nCI info\nCleanup task name\nCleanup task name\nif true, it should ignore all data in base task\nif true, it should ignore all data in base task\nadditional command line arguments\nThe command name\nThe command to execute\nThe command to execute\nThe command to execute\nThe condition to validate\nThe condition to validate\nThe condition to validate\nif provided all condition values must be met in order for …\nif provided all condition values must be met in order for …\nif provided all condition values must be met in order for …\nif script exit code is not 0, the task will not be invoked\nif script exit code is not 0, the command/script of this …\nif script exit code is not 0, the command/script of this …\nThe script runner arguments before the script file path\nThe script runner arguments before the script file path\nThe script runner arguments before the script file path\ncondition type (AND/OR) by default AND\nThe flow config object\nRuntime config\nRuntime config\nThe task config\nCrate info\nThe provided crate to install\nThe provided crate to install\nCurrent working directory\nThe working directory for the task to execute its …\nThe working directory for the task to execute its …\nDefault task name\nThe task.workspace default value\nThe default value in case no decode mapping was found, if …\nIf true, only set the env vars if not already defined\nworkspace level dependencies\ncrate dependencies\nA list of tasks to execute before this task\nA list of tasks to execute before this task\nThe explicit environment variables this script depends on\nif not false, this task is defined as deprecated\nif not false, this task is defined as deprecated\ndescription\nTask description\nDiff flows\nDisables the update check during startup\nDisables colorful output\nDefault output coloring\nIf true (default false) disable all automatic/defined …\nPrevent on error flow even if defined in config section\nPrevent on error flow even if defined in config section\nPrevent workspace support\nPrevent workspace support\nif true, the command/script of this task will not be …\nif true, the command/script of this task will not be …\ndocumentation link\nEnd task name which will be invoked at the end of every run\nEnvironment variables\nEnvironment variables and their values\nThe env vars to setup before running the task commands\nThe env vars to setup before running the task commands\nThe env vars to setup before running the flow\nThe env vars to setup before running the flow\nEnvironment variables and the values which they are …\nEnvironment variables which are defined as false\nEnvironment variables file\nThe env files to setup before running the task commands\nThe env files to setup before running the task commands\nThe env files to setup before running the flow\nThe env files to setup before running the flow\nThe env info\nEnvironment variables which must not be defined\nThe env scripts to execute before running the flow\nThe env scripts to execute before running the flow\nEnvironment variables which must be defined\nEnvironment variables which are defined as true\nspecific version number\nexclude paths\nAllows access unsupported experimental predefined tasks\nCopies values from the task into self.\nCopies values from the task into self.\nCopies values from the config section into self.\nExtend any task based on the defined name\nExtend any task based on the defined name\nPath to another toml file to extend\nFailure message\nScript file name\nFile from which the cache file was loaded from\nFile from which the global config was loaded from\nFiles exist\nFiles modified since last execution\nFiles which do not exist\nOptional add force flag (if needed), default is true\nOptional add force flag (if needed), default is true\nDEPRECATED, replaced with ignore_errors\nDEPRECATED, replaced with ignore_errors\nforced plugin name\nTrue to fork the task to a new sub process\nTrue to fork the task to a new sub process\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new TaskIdentifier referencing a task in the …\nReturns the amount of actions defined on the task\nReturns the alias value based on the current platform and …\nReturns the load script based on the current platform\nReturns the namespace prefix for task names\nReturns a new task based on the override information and …\nReturns the platform name\nGit info\nThe glob used to fetch all paths\nHide any minor tasks such as pre/post hooks\nhomepage link\nif true, any error while executing the task will be …\nif true, any error while executing the task will be …\nIgnore a glob/gitignore-style pattern\nEnables to respect ignore files\nTrue to include directories (default is true if undefined)\nTrue to include files (default is true if undefined)\nInit task name which will be invoked at the start of every …\nContent of the arguments\ninput files\nOptional alternate ‘install’ command\nOptional alternate ‘install’ command\nif defined, the provided crate will be installed (if …\nif defined, the provided crate will be installed (if …\nadditional cargo install arguments\nadditional cargo install arguments\nif defined, the provided script will be executed before …\nif defined, the provided script will be executed before …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the task has any actions on its own or if …\nIs the corresponding env. variable set?\nReturns true if config modifications is needed based on …\nReturns true if the task is valid\nHolds last update check with returned no updates result\nThe name of the task which runs legacy migration flows\nlicense\noverride task if runtime OS is Linux (takes precedence …\nacts like alias if runtime OS is Linux (takes precedence …\nacts like load_script if runtime OS is Linux (takes …\nList all known steps\nList steps for a given category\nAutomatically load cargo aliases as cargo-make tasks\nInvoked while loading the descriptor file but before …\nLog level name\nDefault log level\noverride task if runtime OS is Mac (takes precedence over …\nacts like alias if runtime OS is Mac (takes precedence …\nacts like load_script if runtime OS is Mac (takes …\nScript section\nThe project information member (used by workspaces)\nThe decoding mapping\nmax version number\nmembers paths\nmin version number\nReturn the minimal version, if any, to look for\nMinimal version\nMinimal version\nThe minimum version to match\nMinimum cargo-make/makers version\nModify core tasks config\nTrue/False to enable multi line env values\nGet the name of a dependency\nname\nThe task name\nThe task name\nThe task name to execute\nThe task name\nIf set to some value, all core tasks are modified to: …\nCreates and returns a new instance.\nReturns new instance\nReturns new instance\nCreates and returns a new instance.\nCreates and returns a new instance.\nCreates and returns a new instance.\nCreates and returns a new instance.\nCreates and returns a new instance.\nCreates and returns a new instance.\nCreates and returns a new instance.\nCreates and returns a new instance.\nDo not use .gitignore files\nThe name of the task to run in case of any error during …\nEnable optional extend (default to false)\nAs defined in the cfg target_os\noutput files\nOutput file name\nOutput format\nroot package\npackage info\nTrue to run all tasks in parallel (default false)\nTrue to run all tasks in parallel (default false)\nHolds the dependency path\nThe file path as string\nThe path to the makefile the task resides in\nPath to another makefile\nPlatform names (linux, windows, mac)\nOptional plugin used to execute the task\nOptional plugin used to execute the task\nAll plugin definitions\nAll plugin definitions\nScript section\nPostpone first run until a file changes\nScript section\nOnly print the execution plan\nPrint time summary at end of the flow\nif true, the task is hidden from the list of available …\nif true, the task is hidden from the list of available …\nIf true, all core tasks will be set to private (default …\nThe profile name\nThe profile name this file is relevant to\nProfile names (development, …)\nTrue to reduce console output for non CI execution\nRelative to option, sub as current makefile, git root, …\nrepository link\nThe task name to execute\nThe task name to execute\nRust info\nRust version condition\nIf defined, the component to install via rustup\nThe component to install via rustup\nThe script to execute to get the env value\nIf command is not defined, and script is defined, the …\nIf command is not defined, and script is defined, the …\nThe script file extension\nThe script file extension\nThe script runner (defaults to cmd in windows and sh for …\nThe script runner (defaults to cmd in windows and sh for …\nThe script runner arguments before the script file path\nThe script runner arguments before the script file path\nTrue to search for project root in parent directories if …\nReturns true if the task ignore_errors attribute is …\nIf true, the default core tasks will not be loaded\ndo not load current crate env info (save on perf)\ndo not load git env info (save on perf)\nIf true, the init and end tasks are skipped\nIf true, the init and end tasks are skipped\ndo not load rust env info (save on perf)\nSkip tasks that match the provided pattern\nSkip tasks that match the provided pattern\nThe source value (can be an env expression)\nA list of steps to execute\nThe task to invoke\nThe main task of the flow\nAll task definitions\nAll task definitions\nTest arguments that will be used to check that the crate …\nTest argument that will be used to check that the crate is …\ntiming info for summary\nTrue to print time summary at the end of the flow\nCreates the env. variable name associated to the feature\nThe rust toolchain used to invoke the command or install …\nThe rust toolchain used to invoke the command or install …\nIf true, the env variable will be unset, else ignored\nEnables unstable cargo-make features\nUpdate check minimum time from the previous check (always, …\nThe value to set (can be an env expression)\nversion\nExact version\nWatch version to install if not already installed\nSelect which files/folders to watch\nset to true to watch for file changes and invoke the task …\nset to true to watch for file changes and invoke the task …\nShow paths that changed\noverride task if runtime OS is Windows (takes precedence …\nacts like alias if runtime OS is Windows (takes precedence …\nacts like load_script if runtime OS is Windows (takes …\nAdorn the TaskIdentifier with a namespace\nworkspace info\nset to false to notify cargo-make that this is not a …")